/*
 * Form for Optimization-targets, its used within a tabbed pane to choose the target-measurements
 * Christoph Bodenstein
 * TU-Ilmenau, FG SSE
 */

package timenetexperimentgenerator;

import timenetexperimentgenerator.datamodel.MeasureType;
import java.util.ArrayList;

/**
 *
 * @author Christoph Bodenstein
 */
public class MeasurementForm extends javax.swing.JPanel {
private ArrayList<MeasureType> listOfMeasureMents=new ArrayList<MeasureType>();

    /** Creates new form MeasurementForm */
    public MeasurementForm() {
        initComponents();
        this.setActivated(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBoxMeasurementName = new javax.swing.JComboBox();
        jComboBoxOptimizationTarget = new javax.swing.JComboBox();
        jTextFieldCustomTargetValue = new javax.swing.JTextField();
        jCheckBoxEnableOptimizationForThisMeasurement = new javax.swing.JCheckBox();

        jComboBoxMeasurementName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Measurement1", "Measurement 2" }));
        jComboBoxMeasurementName.setToolTipText("Chose Measurement to optimize");

        jComboBoxOptimizationTarget.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Min", "Max", "Custom" }));
        jComboBoxOptimizationTarget.setToolTipText("Chose Optimization Target Value");
        jComboBoxOptimizationTarget.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxOptimizationTargetItemStateChanged(evt);
            }
        });

        jTextFieldCustomTargetValue.setText("0");
        jTextFieldCustomTargetValue.setToolTipText("Enter Custom Target Value for Measurement");

        jCheckBoxEnableOptimizationForThisMeasurement.setToolTipText("Enable to optimize for this Measurement");
        jCheckBoxEnableOptimizationForThisMeasurement.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxEnableOptimizationForThisMeasurementItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jComboBoxOptimizationTarget, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldCustomTargetValue, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE))
                    .addComponent(jComboBoxMeasurementName, 0, 204, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxEnableOptimizationForThisMeasurement)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jComboBoxMeasurementName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldCustomTargetValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxOptimizationTarget, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jCheckBoxEnableOptimizationForThisMeasurement)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBoxEnableOptimizationForThisMeasurementItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxEnableOptimizationForThisMeasurementItemStateChanged
     this.setActivated(this.jCheckBoxEnableOptimizationForThisMeasurement.isSelected());
    }//GEN-LAST:event_jCheckBoxEnableOptimizationForThisMeasurementItemStateChanged

    private void jComboBoxOptimizationTargetItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxOptimizationTargetItemStateChanged
    this.jTextFieldCustomTargetValue.setEnabled(this.getOptimizationTarget().equals("value"));
    }//GEN-LAST:event_jComboBoxOptimizationTargetItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBoxEnableOptimizationForThisMeasurement;
    private javax.swing.JComboBox jComboBoxMeasurementName;
    private javax.swing.JComboBox jComboBoxOptimizationTarget;
    private javax.swing.JTextField jTextFieldCustomTargetValue;
    // End of variables declaration//GEN-END:variables

    public String getNameOfChosenMeasurement(){
    return (String)this.jComboBoxMeasurementName.getSelectedItem();
    }

    public MeasureType getChosenMeasurement(){
    //ArrayList<MeasureType> myExportMeasureList=new ArrayList<MeasureType>();
        for(int i=0;i<this.listOfMeasureMents.size();i++){
            if(this.getNameOfChosenMeasurement().equals(this.listOfMeasureMents.get(i).getMeasureName())){
            return this.listOfMeasureMents.get(i);
            }
        }
    support.log("***Error: No MeasureMent chosen, wil return null!");
    return null;
    }

    public float getCustomTargetValue(){
    float returnValue=(float) 0.0;
        returnValue=Float.valueOf(this.jTextFieldCustomTargetValue.getText());
        return returnValue;
    }
    
    public void setMeasurementNames(ArrayList l){
    this.jComboBoxMeasurementName.removeAllItems();
        for(int i=0; i<l.size();i++){
        this.jComboBoxMeasurementName.addItem(l.get(i));
        }
    }

    public void setMeasurements(ArrayList <MeasureType>l){
    this.listOfMeasureMents=l;
    this.jComboBoxMeasurementName.removeAllItems();
        for(int i=0; i<l.size();i++){
        this.jComboBoxMeasurementName.addItem((l.get(i)).getMeasureName());
        }
    }


    /**
     * Returns List of all possible Measurements for this form, which can be chosen to optimize
     */
    public ArrayList<MeasureType> getListOfMeasurements(){
    return listOfMeasureMents;
    }


    public void setActiveMeasurement(int i){
        if(this.jComboBoxMeasurementName.getItemCount()>=i){
            i=this.jComboBoxMeasurementName.getItemCount()-1;
        }
        this.jComboBoxMeasurementName.setSelectedIndex(i);
    }

    public String getOptimizationTarget(){
        if(this.jComboBoxOptimizationTarget.getSelectedIndex()==0){
        return "min";
        }
        if(this.jComboBoxOptimizationTarget.getSelectedIndex()==1){
        return "max";
        }else{
        return "value";
        }
    }

    public void setActivated(boolean b){
    this.jComboBoxMeasurementName.setEnabled(b);
    this.jComboBoxOptimizationTarget.setEnabled(b);
    this.jTextFieldCustomTargetValue.setEnabled(this.getOptimizationTarget().equals("value"));
    }

    public boolean isActive(){
        if (this.jCheckBoxEnableOptimizationForThisMeasurement.isSelected()){
        return true;
        }else{
        return false;
        }
    }

}
